[{"/home/chrisjohnson/workspace/dreamcatcher-client/src/index.js":"1","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/Dreamcatcher.js":"2","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/ApplicationViews.js":"3","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/auth/Register.js":"4","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/auth/Login.js":"5","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/navbar/NavBar.js":"6","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/dreams/AllDreams.js":"7","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/moonphase/MoonPhaseProvider.js":"8","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/dreams/DreamsProvider.js":"9","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/dreamtype/DreamTypeProvider.js":"10","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/exercise/ExerciseTypeProvider.js":"11","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/stress/StressTypeProvider.js":"12","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/dreams/NewDream.js":"13"},{"size":410,"mtime":1609725223308,"results":"14","hashOfConfig":"15"},{"size":1176,"mtime":1609707341314,"results":"16","hashOfConfig":"15"},{"size":1507,"mtime":1609816579528,"results":"17","hashOfConfig":"15"},{"size":4702,"mtime":1609816579531,"results":"18","hashOfConfig":"15"},{"size":2506,"mtime":1609370124184,"results":"19","hashOfConfig":"15"},{"size":1310,"mtime":1609707341325,"results":"20","hashOfConfig":"15"},{"size":399,"mtime":1609816579536,"results":"21","hashOfConfig":"15"},{"size":745,"mtime":1609816579548,"results":"22","hashOfConfig":"15"},{"size":1414,"mtime":1609816579538,"results":"23","hashOfConfig":"15"},{"size":745,"mtime":1609816579543,"results":"24","hashOfConfig":"15"},{"size":774,"mtime":1609816579545,"results":"25","hashOfConfig":"15"},{"size":757,"mtime":1609816579551,"results":"26","hashOfConfig":"15"},{"size":9190,"mtime":1609816579542,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"qh4s5g",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"30"},"/home/chrisjohnson/workspace/dreamcatcher-client/src/index.js",[],["57","58"],"/home/chrisjohnson/workspace/dreamcatcher-client/src/components/Dreamcatcher.js",[],"/home/chrisjohnson/workspace/dreamcatcher-client/src/components/ApplicationViews.js",[],"/home/chrisjohnson/workspace/dreamcatcher-client/src/components/auth/Register.js",[],"/home/chrisjohnson/workspace/dreamcatcher-client/src/components/auth/Login.js",[],"/home/chrisjohnson/workspace/dreamcatcher-client/src/components/navbar/NavBar.js",[],"/home/chrisjohnson/workspace/dreamcatcher-client/src/components/dreams/AllDreams.js",["59"],"import React, { useContext, useEffect } from 'react'\nimport { DreamsContext } from './DreamsProvider'\nimport './AllDreams.css'\n\nexport const AllDreams = () => {\n    const { getAllDreams, dreams } = useContext(DreamsContext)\n\n    // initialization effect hook to get dreams\n    useEffect(() => {\n        getAllDreams()\n    }, [])\n    console.log('dreams', dreams)\n\n    return (\n    <>\n    </>\n    )\n}","/home/chrisjohnson/workspace/dreamcatcher-client/src/components/moonphase/MoonPhaseProvider.js",[],"/home/chrisjohnson/workspace/dreamcatcher-client/src/components/dreams/DreamsProvider.js",[],"/home/chrisjohnson/workspace/dreamcatcher-client/src/components/dreamtype/DreamTypeProvider.js",[],"/home/chrisjohnson/workspace/dreamcatcher-client/src/components/exercise/ExerciseTypeProvider.js",[],"/home/chrisjohnson/workspace/dreamcatcher-client/src/components/stress/StressTypeProvider.js",[],"/home/chrisjohnson/workspace/dreamcatcher-client/src/components/dreams/NewDream.js",["60","61"],"import React, { useContext, useEffect, useState } from 'react'\nimport { faMicrophoneAlt, faRedo, faStopCircle } from '@fortawesome/free-solid-svg-icons'\nimport SpeechRecognition, { useSpeechRecognition } from 'react-speech-recognition'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\n\nimport { DreamsContext } from \"./DreamsProvider\"\nimport { DreamTypeContext } from \"../dreamtype/DreamTypeProvider\"\nimport { ExerciseTypeContext } from \"../exercise/ExerciseTypeProvider\"\nimport { MoonPhaseContext } from \"../moonphase/MoonPhaseProvider\"\nimport { StressTypeContext } from \"../stress/StressTypeProvider\"\nimport \"./NewDream.css\"\n\nexport const NewDream = (props) => {\n    const { transcript, resetTranscript } = useSpeechRecognition()\n    const { getAllDreamTypes, dreamTypes } = useContext( DreamTypeContext )\n    const { getAllExerciseTypes, exerciseTypes } = useContext( ExerciseTypeContext )\n    const { getAllMoonPhases, moonPhases } = useContext( MoonPhaseContext )\n    const { getAllStressTypes, stressTypes } = useContext( StressTypeContext )\n    const { addNewDream, dreams, getAllDreams, updateDream } = useContext( DreamsContext )\n\n    // get dreamTypes, exerciseTypes, moonPhases, and stressTypes to populate the dropdown\n    useEffect(() => {\n        getAllDreams()\n        getAllDreamTypes()\n        getAllExerciseTypes()\n        getAllMoonPhases()\n        getAllStressTypes()\n    }, [])\n    \n    useEffect(() => {\n        getDreamInEditMode()\n    }, [])\n\n    const [dream, setDream] = useState({})\n    const [checked, setChecked] = useState(false)\n    \n    // if browser doesn't support speech recognition return null\n    if (!SpeechRecognition.browserSupportsSpeechRecognition()) {\n        return null\n    }\n\n    // function to be passed to the start-recording onClick to enable continuous recording.\n    const startListening = () => {\n        return SpeechRecognition.startListening({ continuous: true })\n    }\n\n    const editMode = props.match.params.hasOwnProperty(\"dreamId\") // true or false\n\n    // if in edit mode, get the dream that matched the postId\n    const getDreamInEditMode = () => {\n        if (editMode) {\n            const dreamId = parseInt(props.match.params.dreamId)\n            const dreamToEdit = dreams.find(d => d.id === dreamId) || {}\n            setDream(dreamToEdit)\n        }\n    }\n\n\n    const handleControlledInputChange = (e) => {\n      const newDream = Object.assign({}, dream)     // create a copy\n      newDream[e.target.name] = e.target.value      // modify a copy\n      setDream(newDream)\n    }\n\n    // changes the value of the checkbox\n    const checkboxHandler = () => {\n        setChecked(!checked)\n    }\n\n    // saves dream changes if in editMode, or saves a new dream if not in edit mode\n    const constructNewDream = () => {\n        if (editMode) {\n            updateDream({\n                id: dream.id,\n                title: dream.title,\n                dream_story: dream.dream_story,\n                private: checked,\n                dream_type_id: parseInt(dream.dream_type_id),\n                exercise_id: parseInt(dream.exercise_id),\n                stress_id: parseInt(2),\n                moon_phase_id: parseInt(2)\n            })\n                .then(() => props.history.push(\"/all-dreams\"))\n        } else {\n            addNewDream({\n                title: dream.title,\n                dream_story: transcript,\n                private: checked,\n                dream_type_id: parseInt(dream.dream_type_id),\n                exercise_id: parseInt(dream.exercise_id),\n                stress_id: parseInt(2),\n                moon_phase_id: parseInt(2)\n            })\n                .then(() => props.history.push(\"/all-dreams\"))\n        }\n    }\n  \n    return (\n      <div className=\"container\">\n          {/* Begin Speech Recognition Section */}\n        <div className=\"d-flex justify-content-center speech-recog\">\n          <FontAwesomeIcon className=\"start-recording\" onClick={startListening} icon={faMicrophoneAlt} />\n          <FontAwesomeIcon className=\"stop-recording\" onClick={SpeechRecognition.stopListening} icon={faStopCircle} />\n          <FontAwesomeIcon className=\"reset-recording\" onClick={resetTranscript} icon={faRedo} />\n        </div>\n        {/* End Speech Recogntion Section */}\n        <form className=\"DreamForm\">\n            <h3 className=\"DreamForm__header text-center\">{editMode ? \"Edit Your Dream\" : \"Record A New Dream\"}</h3>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"title\">Title :</label>\n                    <input type=\"text\" name=\"title\" required autoFocus className=\"form-control\"\n                        placeholder=\"Dream Title\"\n                        defaultValue={dream.title}\n                        onChange={handleControlledInputChange}\n                    />\n                </div>\n            </fieldset>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"dream_story\">Dream Story :</label>\n                    <textarea type=\"text\" name=\"content\" rows=\"15\" required autoFocus className=\"form-control\"\n                        placeholder=\"Click the red microphone to start recording, click the black stop button to end recording, and the circle arrow to reset the transcript.\"\n                        defaultValue={transcript}\n                        onChange={handleControlledInputChange}\n                    />\n                </div>\n            </fieldset>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"dream_type_id\">Dream Type: </label>\n                    <select name=\"dream_type_id\" className=\"form-control\"\n                        proptype=\"int\"\n                        value={dream.dream_type_id}\n                        onChange={handleControlledInputChange}>\n\n                            <option value=\"0\">Select a dream type...</option>\n                            {dreamTypes.map(d => (\n                                <option key={d.id} value={d.id}>\n                                    {d.label}\n                                </option>\n                            ))}\n                        </select>\n                </div>\n            </fieldset>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"exercise_id\">Any Exercise Yesterday? </label>\n                    <select name=\"exercise_id\" className=\"form-control\"\n                        proptype=\"int\"\n                        value={dream.exercise_id}\n                        onChange={handleControlledInputChange}>\n\n                            <option value=\"0\">Select exercise type...</option>\n                            {exerciseTypes.map(e => (\n                                <option key={e.id} value={e.id}>\n                                    {e.exercise_type}\n                                </option>\n                            ))}\n                        </select>\n                </div>\n            </fieldset>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"stress_id\">Any stressful events? </label>\n                    <select name=\"stress_id\" className=\"form-control\"\n                        proptype=\"int\"\n                        value={dream.stress_id}\n                        onChange={handleControlledInputChange}>\n\n                            <option value=\"0\">Select stress event...</option>\n                            {stressTypes.map(s => (\n                                <option key={s.id} value={s.id}>\n                                    {s.stress_event}\n                                </option>\n                            ))}\n                        </select>\n                </div>\n            </fieldset>\n            <fieldset>\n                <div className=\"form-group\">\n                    <label htmlFor=\"moon_phase_id\">What was the moon phase? </label>\n                    <select name=\"moon_phase_id\" className=\"form-control\"\n                        proptype=\"int\"\n                        value={dream.moon_phase_id}\n                        onChange={handleControlledInputChange}>\n\n                            <option value=\"0\">Select moon phase...</option>\n                            {moonPhases.map(m => (\n                                <option key={m.id} value={m.id}>\n                                    {m.label}\n                                </option>\n                            ))}\n                        </select>\n                </div>\n            </fieldset>\n            <div>\n                <label>\n                    <input type=\"checkbox\" id=\"private-checkbox\" checked={checked} onChange={checkboxHandler}></input>\n                    Private?\n                </label>\n            </div>\n\n            <button type=\"submit\"\n                onClick={e => {\n                    e.preventDefault()\n                    constructNewDream()\n                }}\n                className=\"btn btn-form btn-warning btn-sm mb-3\">\n                    {editMode ? \"Save Updates\" : \"Save New Dream\"}\n                </button>\n        </form>\n      </div>\n    )\n  }\n",{"ruleId":"62","replacedBy":"63"},{"ruleId":"64","replacedBy":"65"},{"ruleId":"66","severity":1,"message":"67","line":11,"column":8,"nodeType":"68","endLine":11,"endColumn":10,"suggestions":"69"},{"ruleId":"66","severity":1,"message":"70","line":28,"column":8,"nodeType":"68","endLine":28,"endColumn":10,"suggestions":"71"},{"ruleId":"66","severity":1,"message":"72","line":32,"column":8,"nodeType":"68","endLine":32,"endColumn":10,"suggestions":"73"},"no-native-reassign",["74"],"no-negated-in-lhs",["75"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getAllDreams'. Either include it or remove the dependency array.","ArrayExpression",["76"],"React Hook useEffect has missing dependencies: 'getAllDreamTypes', 'getAllDreams', 'getAllExerciseTypes', 'getAllMoonPhases', and 'getAllStressTypes'. Either include them or remove the dependency array.",["77"],"React Hook useEffect has a missing dependency: 'getDreamInEditMode'. Either include it or remove the dependency array.",["78"],"no-global-assign","no-unsafe-negation",{"desc":"79","fix":"80"},{"desc":"81","fix":"82"},{"desc":"83","fix":"84"},"Update the dependencies array to be: [getAllDreams]",{"range":"85","text":"86"},"Update the dependencies array to be: [getAllDreamTypes, getAllDreams, getAllExerciseTypes, getAllMoonPhases, getAllStressTypes]",{"range":"87","text":"88"},"Update the dependencies array to be: [getDreamInEditMode]",{"range":"89","text":"90"},[325,327],"[getAllDreams]",[1411,1413],"[getAllDreamTypes, getAllDreams, getAllExerciseTypes, getAllMoonPhases, getAllStressTypes]",[1478,1480],"[getDreamInEditMode]"]